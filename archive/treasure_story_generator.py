#!/usr/bin/env python3
"""
Treasure Story Generator with Image Generation

This script generates a 6-scene story about a cartoon character who discovers
a treasure map and sets off on a thrilling journey to uncover hidden riches.
Each scene features vibrant cartoon-style graphics generated by Gemini.

Author: Assistant
Date: 2025-05-27
"""

import os
from pathlib import Path
from datetime import datetime
from google import genai
from google.genai import types
from PIL import Image
from io import BytesIO


def setup_client():
    """
    Initialize the Google GenAI client with API key.

    Returns:
        genai.Client: Configured client instance

    Raises:
        ValueError: If API key is not found
    """
    # Try to get API key from environment variable
    api_key = os.getenv('GOOGLE_API_KEY')

    if not api_key:
        print("GOOGLE_API_KEY environment variable not found.")
        api_key = input("Please enter your Google API key: ").strip()

    if not api_key:
        raise ValueError("API key is required to use the image generation service")

    return genai.Client(api_key=api_key)


def generate_story_with_images(client, output_dir):
    """
    Generate a 6-scene treasure hunt story with images.

    Args:
        client (genai.Client): Configured GenAI client
        output_dir (Path): Directory to save images

    Returns:
        dict: Story data with text and image paths
    """
    # Use the image generation model
    model = "gemini-2.0-flash-preview-image-generation"

    contents = (
        "Generate a 6-scene story about a cartoon character who discovers a treasure map "
        "and sets off on a thrilling journey to uncover hidden riches. Each scene should "
        "feature vibrant cartoon-style graphics. Provide an image for each scene. "
        "Make the story engaging and family-friendly with detailed descriptions for each scene."
    )

    print("üé® Generating treasure hunt story with images...")
    print("This may take a few moments...")

    try:
        response = client.models.generate_content(
            model=model,
            contents=contents,
            config=types.GenerateContentConfig(
                response_modalities=["Text", "Image"]
            ),
        )

        story_data = {
            'scenes': [],
            'generated_at': datetime.now().isoformat(),
            'model': model
        }

        scene_counter = 1

        for part in response.candidates[0].content.parts:
            if part.text is not None:
                print("\nüìñ Story Text:")
                print(part.text)
                story_data['scenes'].append({
                    'type': 'text',
                    'content': part.text,
                    'scene_number': scene_counter if scene_counter <= 6 else 'epilogue'
                })

            elif part.inline_data is not None:
                # Save image to file
                image = Image.open(BytesIO(part.inline_data.data))
                image_filename = f"scene_{scene_counter:02d}_treasure_hunt.png"
                image_path = output_dir / image_filename

                # Save image
                image.save(image_path, 'PNG')
                print(f"üñºÔ∏è  Scene {scene_counter} image saved: {image_filename}")

                story_data['scenes'].append({
                    'type': 'image',
                    'filename': image_filename,
                    'path': str(image_path),
                    'scene_number': scene_counter
                })

                scene_counter += 1

        return story_data

    except Exception as e:
        print(f"‚ùå Error generating story: {e}")
        return None


def create_html_display(story_data, output_dir):
    """
    Create an HTML file to display the story with images.

    Args:
        story_data (dict): Story data with text and images
        output_dir (Path): Directory containing images

    Returns:
        str: Path to HTML file
    """
    html_content = """
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Treasure Hunt Adventure Story</title>
    <style>
        body {
            font-family: 'Comic Sans MS', cursive, sans-serif;
            max-width: 1000px;
            margin: 0 auto;
            padding: 20px;
            background: linear-gradient(135deg, #f5deb3, #daa520);
            min-height: 100vh;
        }
        .header {
            text-align: center;
            color: #8b4513;
            text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
            margin-bottom: 30px;
        }
        .scene {
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            margin: 20px 0;
            padding: 20px;
            box-shadow: 0 8px 16px rgba(0,0,0,0.2);
            border: 3px solid #daa520;
        }
        .scene-image {
            width: 100%;
            max-width: 600px;
            height: auto;
            border-radius: 10px;
            border: 2px solid #8b4513;
            margin: 15px 0;
            display: block;
            margin-left: auto;
            margin-right: auto;
        }
        .scene-text {
            font-size: 16px;
            line-height: 1.6;
            color: #2f4f4f;
            text-align: justify;
        }
        .scene-number {
            color: #b8860b;
            font-size: 24px;
            font-weight: bold;
            margin-bottom: 10px;
        }
        .generated-info {
            text-align: center;
            font-size: 12px;
            color: #696969;
            margin-top: 30px;
            padding: 10px;
            background: rgba(255, 255, 255, 0.8);
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üè¥‚Äç‚ò†Ô∏è Treasure Hunt Adventure üè¥‚Äç‚ò†Ô∏è</h1>
        <h2>A Magical Story Generated by AI</h2>
    </div>
"""

    # Group scenes by number for proper ordering
    text_scenes = {}
    image_scenes = {}

    for scene in story_data['scenes']:
        scene_num = scene['scene_number']
        if scene['type'] == 'text':
            text_scenes[scene_num] = scene['content']
        elif scene['type'] == 'image':
            image_scenes[scene_num] = scene

    # Generate HTML for each scene
    for i in range(1, 7):  # Expecting 6 scenes
        if i in text_scenes or i in image_scenes:
            html_content += '    <div class="scene">\n'
            html_content += f'        <div class="scene-number">Scene {i}</div>\n'

            if i in image_scenes:
                image_scene = image_scenes[i]
                html_content += f'        <img src="{image_scene["filename"]}" alt="Scene {i}" class="scene-image">\n'

            if i in text_scenes:
                # Split text into paragraphs for better formatting
                paragraphs = text_scenes[i].split('\n\n')
                for paragraph in paragraphs:
                    if paragraph.strip():
                        html_content += f'        <div class="scene-text">{paragraph.strip()}</div>\n'

            html_content += '    </div>\n\n'

    # Add any remaining text content
    for scene in story_data['scenes']:
        if scene['type'] == 'text' and scene['scene_number'] not in range(1, 7):
            html_content += '    <div class="scene">\n'
            html_content += f'        <div class="scene-text">{scene["content"]}</div>\n'
            html_content += '    </div>\n\n'

    html_content += f"""
    <div class="generated-info">
        <p>Generated on: {story_data['generated_at']}</p>
        <p>Model: {story_data['model']}</p>
        <p>‚ú® Created with Google Gemini AI ‚ú®</p>
    </div>
</body>
</html>
"""

    html_path = output_dir / "treasure_story.html"
    with open(html_path, 'w', encoding='utf-8') as f:
        f.write(html_content)

    return str(html_path)


def main():
    """Main function to orchestrate the story generation process."""
    print("üè¥‚Äç‚ò†Ô∏è Welcome to the Treasure Hunt Story Generator! üè¥‚Äç‚ò†Ô∏è")
    print("=" * 60)

    # Setup output directory
    project_dir = Path(__file__).parent
    output_dir = project_dir / "generated_story"
    output_dir.mkdir(exist_ok=True)

    try:
        # Initialize client
        client = setup_client()

        # Generate story with images
        story_data = generate_story_with_images(client, output_dir)

        if story_data:
            print("\n‚úÖ Story generation completed successfully!")

            # Create HTML display
            html_path = create_html_display(story_data, output_dir)
            print(f"üìÑ HTML story created: {html_path}")

            print(f"\nüìÇ All files saved in: {output_dir}")
            print("\nüéâ Your treasure hunt adventure is ready!")
            print(f"Open {html_path} in your browser to view the complete story.")

            return story_data
        else:
            print("‚ùå Failed to generate story")
            return None

    except Exception as e:
        print(f"‚ùå Error: {e}")
        return None


if __name__ == "__main__":
    main()
